==============================ООП================================

Объектно-Ориентированное Программирование (ООП) в C++ — 
это мощный подход к программированию, 
основанный на моделировании программы как набора объектов, 
которые взаимодействуют друг с другом. C++ — один из первых языков, 
в которых ООП встроено на низком уровне и совмещено с процедурным стилем.


Основные принципы ООП в C++
ООП в C++ основывается на четырёх ключевых принципах:

№	Принцип	Что это
1	Абстракция -- Сокрытие деталей реализации — показываем только важное.
2	Инкапсуляци -- Объединение данных и методов в одном объекте; защита данных.
3	Наследовани -- Возможность создавать новые классы на основе уже существующих.
4	Полиморфизм -- Возможность одного интерфейса работать с разными типами данных.

Класс — это шаблон (модель), по которому создаются объекты. Он описывает данные и методы.

Объект — это экземпляр класса.

Инкапсуляция
Инкапсуляция — сокрытие внутренних данных класса и ограничение прямого доступа к ним.

Модификаторы доступа:
public: доступен везде.

private: доступен только внутри класса.

protected: доступен в классе и его наследниках.

Инкапсуляция
Инкапсуляция — сокрытие внутренних данных класса и ограничение прямого доступа к ним.

Модификаторы доступа:
public: доступен везде.

private: доступен только внутри класса.

protected: доступен в классе и его наследниках.

Наследование
Позволяет наследовать свойства и поведение другого класса.

Полиморфизм
Позволяет обращаться к объектам разных типов через один интерфейс.

 Виды:
Перегрузка функций и операторов (compile-time).

Виртуальные функции и наследование (run-time).

 Виртуальные функции:
Позволяют переопределить поведение метода в наследниках.

Абстракция и абстрактные классы
Абстрактный класс содержит чисто виртуальную функцию — то есть метод, который обязательно должен быть реализован в потомках.

Конструктор — вызывается при создании объекта:

Деструктор — вызывается при удалении объекта

Подытожим
Принцип	Что делает
Класс / Объект	Описание и использование сущности
Инкапсуляция	Сокрытие данных
Наследование	Повторное использование кода
Полиморфизм	Одинаковый интерфейс — разное поведение
Абстракция	Скрытие реализации